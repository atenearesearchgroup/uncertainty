model MechanicalArm


enum Color { Red, Yellow, Green }

class UColor
attributes
  values: Sequence(Tuple(literal:Color, conf:Real))
--operations
 -- equals(ue: UColor): Boolean = self.values -> asSet = ue.values -> asSet
 -- conf (lit:Color): Real = -- confidence of a literal
-- 	let L: Sequence(Color) = self.values->collect(literal) in
-- 	if L->includes(lit) then self.values->collect(conf)->at(L->indexOf(lit)) else 0.0 endif
--  literals (): Sequence ( Color ) = self.values->collect(literal)
--  uEquals(ue: UColor ): UBoolean = 
--       if self.equals(ue) then UBoolean(true,1.0)
--      else UBoolean(true, 
--	       let L:Sequence(Color) = self.literals()->union(ue.literals()) in
--           1.0 - (L-> iterate (l ; s : Real = 0.0 | let x1 : Real = self.conf(l) in 
--													let x2 : Real = ue.conf(l) in 
--													(s + (x2-x1)*(x2 -x1))/4).sqrt()))
--     endif
-- 
-- post : self.equals (ue) implies (result.b and result.literal =1.0)
-- post : not self.equals (ue) implies result.b and let L:Sequence(Color) = self.literals()->union(ue.literals()) in
-- result .c = 1.0 - (L-> iterate (l ; s : Real = 0.0 | let x1 : Real = self.conf(l) in
-- let x2 : Real = ue. conf (l) in 
-- s + (x2-x1)*(x2 -x1))/4).sqrt()
constraints
inv UColorUniqueLiterals :
  self.values->size() = self.values->collect(literal)->asSet->size
inv UColorProbabilities :
  self.values->collect(conf)->sum()=1.0 and self.values->collect(conf)->select(c | c <0.0 or c >1.0)->isEmpty() 
end


class ProductionLine
attributes
operations
	start()
	begin
		declare b1:Boolean, b2:Boolean, arm:Arm, a:Apple, p:Position, c:Container, numMoves:Integer;
		arm := self.arms->any(true);
		
		a := arm.tray.apples->any(true); -- Apple.allInstances->any(ap | ap.container.oclIsUndefined());
		if a<>null then
			b1:= arm.grasp(a);
			if (b1) then
				c:=arm.classify(a);
				arm.moveTo(c);
				b2:=arm.drop(a, c);
				if (not b2) then
					arm.wastedApples:=arm.wastedApples+1;
				end
			else
				arm.missedApples:=arm.missedApples+1;
			end;
		end;
		arm.backToBase();
	end
end

class Tray
end

class Arm
attributes
	needsCalibration : Boolean
	missedApples : Integer init : 0
	wastedApples : Integer init : 0
	deterioration : UReal init : UReal(0.0, 0.001)
	tolerance : UReal init : UReal(0.0, 0.01)
operations
	grasp(a:Apple) : Boolean
	begin
		declare distance : UReal;
		self.currentPos.x := self.tray.pos.x + self.tolerance;
		self.currentPos.y := self.tray.pos.y + self.tolerance;
		self.currentPos.z := self.tray.pos.z + self.tolerance;
		self.tolerance := self.tolerance + self.deterioration;
		distance := self.currentPos.distance(self.tray.pos);
		if ((distance>self.tolerance).confidence()>0.5) then
			result := false;
		else
			delete (a.tray, a) from Apple_Tray;
			result := true;
		end
	end
	classify(a:Apple):Container
	begin
		if (a.color.values->any(t | t.literal=#Red).conf>=0.9) then
			result := Container.allInstances->any(cn | cn.type = #RedDelicious);
		else
			if (a.color.values->any(t | t.literal=#Red).conf>=0.4 and a.color.values->any(t | t.literal=#Green).conf<0.1) then
				result := Container.allInstances->any(cn | cn.type = #PinkLady);
			else
				if (a.color.values->any(t | t.literal=#Yellow).conf>0.8) then
					result := Container.allInstances->any(cn | cn.type = #GoldenDelicious);
				else
					if (a.color.values->any(t | t.literal=#Green).conf>0.7) then
						result := Container.allInstances->any(cn | cn.type = #GrannySmith);
					else
						result := Container.allInstances->any(cn | cn.type = #Cooking);
					end
				end
			end
		end
	end
	moveTo(c:Container)
	begin
		self.currentPos.x := c.pos.x + self.tolerance;
		self.currentPos.y := c.pos.y + self.tolerance;
		self.currentPos.z := c.pos.z + self.tolerance;
		self.tolerance := self.tolerance + self.deterioration;
	end
	drop(a:Apple, c:Container) : Boolean
	begin
		declare distance:UReal;
		distance := self.currentPos.distance(c.pos);
		if ((distance>self.tolerance).confidence()>0.5) then
			result := false;
		else
			result := true;
			insert (c, a) into Container_Apples
		end
	end
	backToBase()
	begin
		self.currentPos.x := self.basePos.x;
		self.currentPos.y := self.basePos.y;
		self.currentPos.z := self.basePos.z;
		-- note that uncertainty has been reset to 0
		if ((self.tolerance.uncertainty() > self.deterioration.uncertainty()*100.0)) then
			self.needsCalibration := true;
		end
	end
	calibrate()
	begin
		self.tolerance := UReal(0.0, 0.0);
		self.needsCalibration := false;
	end
end

class Container
attributes
	type : AppleType
end

class Position
attributes
	x : UReal
	y : UReal
	z : UReal
operations
	distance(p:Position) : UReal =
		((self.x-p.x).abs()+
		(self.y-p.y).abs()+
		(self.z-p.z).abs());
end

class Apple
attributes
	size : UReal
	weight : UReal
	color : UColor -- Sequence(Tuple(c:Color, p:Real))
	type : AppleType derive : self.container.type
operations
end

enum AppleType { RedDelicious, PinkLady, GoldenDelicious, GrannySmith, Cooking } -- regular enum

composition ProductionLine_Arms between
	ProductionLine [1] role prodLine
	Arm [*] role arms
end

association Tray_Position between
	Tray [0..1] role tray
	Position [1] role pos
end

composition Apple_Tray between
	Tray [0..1] role tray
	Apple [*] role apples
end

association Arm_Tray between
	Arm [1] role arm
	Tray [1] role tray
end

association Arm_CurrentPosition between
	Arm [0..1] role arm
	Position [1] role currentPos
end

association Arm_BasePosition between
	Arm [0..1] role baseArm
	Position [1] role basePos
end

association Container_Position between
	Container [0..1] role container
	Position [1] role pos
end

composition Container_Apples between
	Container [0..1] role container
	Apple [0..*] role apples
end

constraints
