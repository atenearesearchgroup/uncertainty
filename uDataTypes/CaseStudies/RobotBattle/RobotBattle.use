model RobotBattle


-- enum ThreatLevel {LOW, MEDIUM, HIGH}

class Battlefield
operations
  move(seconds:UInteger)
  begin
    for o in self.movingObjects do
      o.move(seconds)
    end
  end
end -- class Battlefield

class Clock
attributes
now:UInteger
end

class Robot < MovingObject
attributes
id:String
operations
pointAt(o:UnidentifiedObject):Mark
begin
declare gs:Mark;
gs:=new Mark;
-- create links gunshot links
insert (gs,self.position) into GunShotPosition;
insert (self,gs) into Marks;
insert (gs,o) into Hit;
result:=gs;
end -- operation pointAt

shootAtMarkedThreats()
begin
for m in self.mark do
  if m.hitsTarget.confidence()>=0.5 then -- shoot at it
    if m.hitsTarget.confidence()>=0.90 then -- destroy it
		if m.target<>null then -- maybe it was hit by other robot
			destroy(m.target) 
		end;
        destroy(m); -- and also destroy the mark
	end;
  end;
end;
end

end -- class Robot

class UnidentifiedObject < MovingObject
attributes
id:UString
end

class Mark
attributes

angle:UReal derive: 
  let x:UReal = (target.position.x - robot.position.x) in
  let y:UReal = (target.position.y - robot.position.y) in
  if ((x.value()-x.uncertainty()<=0)and(x.value()+x.uncertainty()>=0)) then -- x=0? 
	  if ((y>=0).confidence()>=0.5) then  -- y>=0?
		UReal(1.570796326791001,y.uncertainty())
	  else
		UReal(4.712388980373001246,y.uncertainty())
	  endif
  else
	(y/x).atan() 
  endif

hitsTarget:UBoolean derive:
   let distance : UReal =  robot.position.distance(target.position) in
   ((robot.position.x-target.position.x)+distance*self.angle.cos()).abs() <= target.width and
   ((robot.position.y-target.position.y)+distance*self.angle.sin()).abs() <= target.width 

end -- class Mark

class Coordinate
attributes
x:UReal
y:UReal
operations
distance(other:Coordinate):UReal = ((self.x - other.x)*(self.x - other.x) + (self.y - other.y)*(self.y - other.y)).sqrt()
-- closeTo(other:Coordinate,gap:UReal):UBoolean = self.distance(other) <= gap
end

abstract class MovingObject
attributes
width:UReal
angle:UReal
speed:UReal
operations
-- headTo(angle:UReal)
-- begin
-- self.angle:=angle;
-- end
-- post: self.angle = angle
-- 
-- changeSpeed(speed:UReal)
-- begin
-- self.speed:=speed;
-- end
-- post: self.speed = speed

move(seconds:UInteger)
begin
  declare c:Coordinate, d:UReal;
  c:=new Coordinate;
  d:=self.speed * seconds;
  c.x:=self.position.x+d*self.angle.cos();
  c.y:=self.position.y+d*self.angle.sin();
  delete (self,self.position) from ObjectPosition;
  insert (self,c) into ObjectPosition;
end

end

association GunShotPosition between
Mark [0..1] role mark 
Coordinate [1] role position
end

association ObjectPosition between
MovingObject [0..1] role object 
Coordinate [1] role position
end

association Marks between
Robot [1] role robot
Mark [*] role mark
end

association Hit between
Mark [*] role mark
UnidentifiedObject [1] role target
end

composition Robots between
Battlefield [1] role battlefield
MovingObject [*] role movingObjects
end

composition Clocks between
Battlefield [1]
Clock [1]
end


constraints

-- context Clock inv UniqueClock: 
--    Clock.allInstances->size = 1

